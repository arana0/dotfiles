awkの基本動作は、とってもシンプルである。
http://d.hatena.ne.jp/zariganitosh/20131209/minimum_awk

1. テキストを1行読み込んで、
2. 読み込んだ行を空白区切りのデータと解釈して、
3. 何らかの処理を行う。
以上の動作を、行末まで繰り返す。
1、2の動作は、awkが自動的に処理する。
3の部分を、自分が書くことになる。

awkスクリプト全体はシングルクォートで囲って、何らかの処理はさらに{ }で囲っておく必要がある

ファイル名を指定する時には
cat ファイル名 | awk 'スクリプト'
もしくは
awk 'スクリプト' ファイル名

$1には、1列目のデータが入っている
$2には、2列目のデータが入っている
$nには、n列目のデータが入っている
そして、$0にはすべての列、つまり1行全体のデータが入っている

print $1 $2 $3と、print $1,$2,$3は違う
awkにおいて、print $0 ＝ print $1,$2,$3 である
awkのスペースには、文字列を連結する役目がある

"e"を含む行の時だけprint
$ cat abc.txt | awk '/e/{print $0}'
aで始まる行とgで始まる行を取り出す
$ cat abc.txt | awk '
> /^a/{print $0}
> /^g/{print $0}
> '

3行目の時だけprint
$ cat abc.txt | awk 'NR==3{print $0}'
NRはawkが用意した変数である。現在処理している行番号が代入されている。

1列目が"a"の時だけ、print
$ cat abc.txt | awk '$1=="a"{print $0}'

ここまでprint $0と書いてきたが、多くの場合$0は省略できる。
よって、print $0はprintのみでOK。

また、パターンのみでアクションが存在しない場合、パターンがマッチした時、awkは{print}を処理してくれる。
よって検索はパターンの指定のみでOK。

変数には最初から、""が代入されている。
よって、変数の初期化なしで、いきなり数値計算できるのだ！
seq 10 | awk '{sum+=$1; print sum}'
1
3
6
10
15
21
28
36
45
55

